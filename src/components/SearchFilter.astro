---
// This component will handle client-side filtering
---

<div class="mb-6">
  <!-- Filter Title (optional, can be removed for minimalism) -->
  <!-- <h2 class="font-serif text-lg font-bold text-gray-900 mb-2" style="font-family: 'Playfair Display', serif;">Filter Personals</h2> -->
  <div class="flex flex-col md:flex-row md:items-end gap-4 md:gap-6">
    <!-- Search Input -->
    <div class="flex-1">
      <label for="search-input" class="block text-xs font-semibold text-gray-700 mb-1 font-serif" style="font-family: 'Playfair Display', serif;">
        Search
      </label>
      <input
        type="text"
        id="search-input"
        placeholder="Keywords, interests, or topics..."
        class="block w-full border-0 border-b-2 border-gray-300 bg-transparent px-0 py-1 text-base text-gray-900 placeholder-gray-400 focus:border-gray-800 focus:ring-0 font-sans"
        style="font-family: 'Inter', system-ui, sans-serif;"
      />
    </div>
    <!-- Date Filter -->
    <div>
      <label for="date-filter" class="block text-xs font-semibold text-gray-700 mb-1 font-serif" style="font-family: 'Playfair Display', serif;">
        Sort
      </label>
      <select
        id="date-filter"
        class="block w-full border-0 border-b-2 border-gray-300 bg-transparent px-0 py-1 text-base text-gray-900 focus:border-gray-800 focus:ring-0 font-sans"
        style="font-family: 'Inter', system-ui, sans-serif;"
      >
        <option value="newest">Newest first</option>
        <option value="oldest">Oldest first</option>
      </select>
    </div>
    <!-- Category Filter -->
    <div>
      <label for="category-filter" class="block text-xs font-semibold text-gray-700 mb-1 font-serif" style="font-family: 'Playfair Display', serif;">
        Category
      </label>
      <select
        id="category-filter"
        class="block w-full border-0 border-b-2 border-gray-300 bg-transparent px-0 py-1 text-base text-gray-900 focus:border-gray-800 focus:ring-0 font-sans"
        style="font-family: 'Inter', system-ui, sans-serif;"
      >
        <option value="">All</option>
        <option value="dating">Dating</option>
        <option value="friendship">Friendship</option>
        <option value="community">Community</option>
        <option value="activity">Activity Partner</option>
      </select>
    </div>
    <!-- Location Filter -->
    <div>
      <label for="location-filter" class="block text-xs font-semibold text-gray-700 mb-1 font-serif" style="font-family: 'Playfair Display', serif;">
        Location
      </label>
      <select
        id="location-filter"
        class="block w-full border-0 border-b-2 border-gray-300 bg-transparent px-0 py-1 text-base text-gray-900 focus:border-gray-800 focus:ring-0 font-sans"
        style="font-family: 'Inter', system-ui, sans-serif;"
      >
        <option value="">All</option>
        <option value="nyc">New York City</option>
        <option value="la">Los Angeles</option>
        <option value="chicago">Chicago</option>
        <option value="online">Online</option>
      </select>
    </div>
    <!-- Clear Filters -->
    <div class="flex items-end">
      <button
        id="clear-filters"
        class="text-xs text-gray-600 underline bg-transparent border-0 px-0 py-1 hover:text-gray-900 focus:outline-none font-sans"
        style="font-family: 'Inter', system-ui, sans-serif;"
      >
        Clear
      </button>
    </div>
  </div>
  <!-- Results Count -->
  <div class="flex items-center justify-between mt-2">
    <p id="results-count" class="text-xs text-gray-600 font-sans" style="font-family: 'Inter', system-ui, sans-serif;">
      Showing all personals
    </p>
    <!-- View toggles removed for minimalism -->
  </div>
</div>

<script>
  // Filter functionality
  let allPersonals = [];
  let filteredPersonals = [];

  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search-input');
    const dateFilter = document.getElementById('date-filter');
    const categoryFilter = document.getElementById('category-filter');
    const locationFilter = document.getElementById('location-filter');
    const clearFiltersBtn = document.getElementById('clear-filters');
    const resultsCount = document.getElementById('results-count');

    // Get all personal cards
    const personalCards = document.querySelectorAll('[data-personal-id]');
    allPersonals = Array.from(personalCards).map(card => ({
      element: card,
      id: card.getAttribute('data-personal-id'),
      text: card.getAttribute('data-personal-text')?.toLowerCase() || '',
      date: card.getAttribute('data-personal-date') || '',
      category: card.getAttribute('data-personal-category') || '',
      location: card.getAttribute('data-personal-location') || ''
    }));

    filteredPersonals = [...allPersonals];

    // Event listeners
    searchInput?.addEventListener('input', applyFilters);
    dateFilter?.addEventListener('change', applyFilters);
    categoryFilter?.addEventListener('change', applyFilters);
    locationFilter?.addEventListener('change', applyFilters);
    clearFiltersBtn?.addEventListener('click', clearFilters);
  });

  function applyFilters() {
    const searchInput = document.getElementById('search-input');
    const dateFilter = document.getElementById('date-filter');
    const categoryFilter = document.getElementById('category-filter');
    const locationFilter = document.getElementById('location-filter');
    const resultsCount = document.getElementById('results-count');

    const searchTerm = searchInput?.value.toLowerCase() || '';
    const dateSort = dateFilter?.value || 'newest';
    const category = categoryFilter?.value || '';
    const location = locationFilter?.value || '';

    // Filter personals
    filteredPersonals = allPersonals.filter(personal => {
      const matchesSearch = !searchTerm || personal.text.includes(searchTerm);
      const matchesCategory = !category || personal.category === category;
      const matchesLocation = !location || personal.location === location;
      
      return matchesSearch && matchesCategory && matchesLocation;
    });

    // Sort by date
    filteredPersonals.sort((a, b) => {
      const dateA = new Date(a.date).getTime();
      const dateB = new Date(b.date).getTime();
      return dateSort === 'newest' ? dateB - dateA : dateA - dateB;
    });

    // Update visibility
    allPersonals.forEach(personal => {
      const isVisible = filteredPersonals.includes(personal);
      personal.element.style.display = isVisible ? 'block' : 'none';
    });

    // Update results count
    if (resultsCount) {
      const total = allPersonals.length;
      const showing = filteredPersonals.length;
      resultsCount.textContent = showing === total 
        ? `Showing all ${total} personals` 
        : `Showing ${showing} of ${total} personals`;
    }
  }

  function clearFilters() {
    const searchInput = document.getElementById('search-input');
    const dateFilter = document.getElementById('date-filter');
    const categoryFilter = document.getElementById('category-filter');
    const locationFilter = document.getElementById('location-filter');

    if (searchInput) searchInput.value = '';
    if (dateFilter) dateFilter.value = 'newest';
    if (categoryFilter) categoryFilter.value = '';
    if (locationFilter) locationFilter.value = '';

    applyFilters();
  }
</script> 