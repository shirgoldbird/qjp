---
// This component will handle client-side filtering
---

<div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
  <div class="space-y-4">
    <!-- Search Input -->
    <div>
      <label for="search-input" class="block text-sm font-medium text-gray-700 mb-2">
        Search personals
      </label>
      <div class="relative">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
        <input
          type="text"
          id="search-input"
          placeholder="Search for keywords, interests, or topics..."
          class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
        />
      </div>
    </div>

    <!-- Filter Options -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
      <!-- Date Filter -->
      <div>
        <label for="date-filter" class="block text-sm font-medium text-gray-700 mb-2">
          Sort by date
        </label>
        <select
          id="date-filter"
          class="block w-full px-3 py-2 border border-gray-300 rounded-md leading-5 bg-white focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
        >
          <option value="newest">Newest first</option>
          <option value="oldest">Oldest first</option>
        </select>
      </div>

      <!-- Category Filter -->
      <div>
        <label for="category-filter" class="block text-sm font-medium text-gray-700 mb-2">
          Category
        </label>
        <select
          id="category-filter"
          class="block w-full px-3 py-2 border border-gray-300 rounded-md leading-5 bg-white focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
        >
          <option value="">All categories</option>
          <option value="dating">Dating</option>
          <option value="friendship">Friendship</option>
          <option value="community">Community</option>
          <option value="activity">Activity Partner</option>
        </select>
      </div>

      <!-- Location Filter -->
      <div>
        <label for="location-filter" class="block text-sm font-medium text-gray-700 mb-2">
          Location
        </label>
        <select
          id="location-filter"
          class="block w-full px-3 py-2 border border-gray-300 rounded-md leading-5 bg-white focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
        >
          <option value="">All locations</option>
          <option value="nyc">New York City</option>
          <option value="la">Los Angeles</option>
          <option value="chicago">Chicago</option>
          <option value="online">Online</option>
        </select>
      </div>

      <!-- Clear Filters -->
      <div class="flex items-end">
        <button
          id="clear-filters"
          class="w-full px-3 py-2 text-sm font-medium text-gray-700 bg-gray-100 border border-gray-300 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 transition-colors"
        >
          Clear filters
        </button>
      </div>
    </div>

    <!-- Results Count -->
    <div class="flex items-center justify-between pt-4 border-t border-gray-200">
      <p id="results-count" class="text-sm text-gray-600">
        Showing all personals
      </p>
      <div class="flex items-center space-x-2">
        <span class="text-sm text-gray-600">View:</span>
        <button
          id="grid-view"
          class="p-2 text-gray-400 hover:text-indigo-600 focus:outline-none focus:text-indigo-600"
          aria-label="Grid view"
        >
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path d="M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM11 13a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
          </svg>
        </button>
        <button
          id="list-view"
          class="p-2 text-indigo-600 focus:outline-none"
          aria-label="List view"
        >
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd" />
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // Filter functionality
  let allPersonals: any[] = [];
  let filteredPersonals: any[] = [];

  // Initialize filters
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const dateFilter = document.getElementById('date-filter') as HTMLSelectElement;
    const categoryFilter = document.getElementById('category-filter') as HTMLSelectElement;
    const locationFilter = document.getElementById('location-filter') as HTMLSelectElement;
    const clearFiltersBtn = document.getElementById('clear-filters') as HTMLButtonElement;
    const gridViewBtn = document.getElementById('grid-view') as HTMLButtonElement;
    const listViewBtn = document.getElementById('list-view') as HTMLButtonElement;
    const resultsCount = document.getElementById('results-count') as HTMLParagraphElement;

    // Get all personal cards
    const personalCards = document.querySelectorAll('[data-personal-id]');
    allPersonals = Array.from(personalCards).map(card => ({
      element: card,
      id: card.getAttribute('data-personal-id'),
      text: card.getAttribute('data-personal-text')?.toLowerCase() || '',
      date: card.getAttribute('data-personal-date') || '',
      category: card.getAttribute('data-personal-category') || '',
      location: card.getAttribute('data-personal-location') || ''
    }));

    filteredPersonals = [...allPersonals];

    // Event listeners
    searchInput?.addEventListener('input', applyFilters);
    dateFilter?.addEventListener('change', applyFilters);
    categoryFilter?.addEventListener('change', applyFilters);
    locationFilter?.addEventListener('change', applyFilters);
    clearFiltersBtn?.addEventListener('click', clearFilters);
    gridViewBtn?.addEventListener('click', () => setViewMode('grid'));
    listViewBtn?.addEventListener('click', () => setViewMode('list'));

    // Initialize view mode
    setViewMode('list');
  });

  function applyFilters() {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const dateFilter = document.getElementById('date-filter') as HTMLSelectElement;
    const categoryFilter = document.getElementById('category-filter') as HTMLSelectElement;
    const locationFilter = document.getElementById('location-filter') as HTMLSelectElement;
    const resultsCount = document.getElementById('results-count') as HTMLParagraphElement;

    const searchTerm = searchInput?.value.toLowerCase() || '';
    const dateSort = dateFilter?.value || 'newest';
    const category = categoryFilter?.value || '';
    const location = locationFilter?.value || '';

    // Filter personals
    filteredPersonals = allPersonals.filter(personal => {
      const matchesSearch = !searchTerm || personal.text.includes(searchTerm);
      const matchesCategory = !category || personal.category === category;
      const matchesLocation = !location || personal.location === location;
      
      return matchesSearch && matchesCategory && matchesLocation;
    });

    // Sort by date
    filteredPersonals.sort((a, b) => {
      const dateA = new Date(a.date).getTime();
      const dateB = new Date(b.date).getTime();
      return dateSort === 'newest' ? dateB - dateA : dateA - dateB;
    });

    // Update visibility
    allPersonals.forEach(personal => {
      const isVisible = filteredPersonals.includes(personal);
      (personal.element as HTMLElement).style.display = isVisible ? 'block' : 'none';
    });

    // Update results count
    if (resultsCount) {
      const total = allPersonals.length;
      const showing = filteredPersonals.length;
      resultsCount.textContent = showing === total 
        ? `Showing all ${total} personals` 
        : `Showing ${showing} of ${total} personals`;
    }
  }

  function clearFilters() {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const dateFilter = document.getElementById('date-filter') as HTMLSelectElement;
    const categoryFilter = document.getElementById('category-filter') as HTMLSelectElement;
    const locationFilter = document.getElementById('location-filter') as HTMLSelectElement;

    if (searchInput) searchInput.value = '';
    if (dateFilter) dateFilter.value = 'newest';
    if (categoryFilter) categoryFilter.value = '';
    if (locationFilter) locationFilter.value = '';

    applyFilters();
  }

  function setViewMode(mode: 'grid' | 'list') {
    const container = document.getElementById('personals-container');
    const gridViewBtn = document.getElementById('grid-view');
    const listViewBtn = document.getElementById('list-view');

    if (!container) return;

    if (mode === 'grid') {
      container.className = 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6';
      gridViewBtn?.classList.add('text-indigo-600');
      gridViewBtn?.classList.remove('text-gray-400');
      listViewBtn?.classList.add('text-gray-400');
      listViewBtn?.classList.remove('text-indigo-600');
    } else {
      container.className = 'space-y-6';
      listViewBtn?.classList.add('text-indigo-600');
      listViewBtn?.classList.remove('text-gray-400');
      gridViewBtn?.classList.add('text-gray-400');
      gridViewBtn?.classList.remove('text-indigo-600');
    }
  }
</script> 